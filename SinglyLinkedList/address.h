#pragma once
#include<iostream>
#include<Windows.h>
using namespace std;
//------------------------------------------------------------------------
//		рис. 1		 Односвязный список
/* 
				+---------+    +---------+    +---------+
				| данные  |    | данные  |    | данные  |
				+---------+    +---------+    +---------+
				|указатель|--->|указатель|--->|    0    |
				+---------+    +---------+    +---------+
*/
//------------------------------------------------------------------------
/*
	Существует два основных способа построения односвязного списка.
	Первый способ — помещать новые элементы в конец списка.
	Второй — вставлять элементы в определенные позиции списка, например,
	в порядке возрастания. От способа построения списка зависит алгоритм
	функции добавления элемента. Давайте начнем с более простого способа
	создания списка путем помещения элементов в конец.
*/
//------------------------------------------------------------------------
/*
Как правило, элементы связанного списка являются структурами, так как,
помимо данных, они содержат ссылку на следующий элемент. Поэтому необходимо
определить структуру, которая будет использоваться в последующих примерах.
Поскольку списки рассылки обычно хранятся в связанных списках, хорошим
выбором будет структура, описывающая почтовый адрес. Ее описание показано ниже:
*/
//------------------------------------------------------------------------
struct address
{
	char name[40];
	char street[40];
	char city[20];
	char state[3];
	char zip[11];
	struct address* next; /* ссылка на следующий адрес */
//------------------------------------------------------------------------
	void addAddress();
};
//------------------------------------------------------------------------

/*
	Несмотря на то, что созданный с помощью функции slstore() 
	список можно отсортировать отдельной операцией уже после его
	создания, легче сразу создавать упорядоченный список, вставляя
	каждый новый элемент в нужное место в последовательности. Кроме 
	того, если список уже отсортирован, имеет смысл поддерживать его 
	упорядоченность, вставляя новые элементы в соответствующие позиции.
	Для вставки элемента таким способом требуется последовательно 
	просматривать список до тех пор, пока не будет найдено место нового
	элемента, затем вставить в найденную позицию новую запись и переустановить
	ссылки.
*/

/*
При вставке элемента в односвязный список может возникнуть одна из трех
ситуаций: элемент становится первым, элемент вставляется между двумя другими,
элемент становится последним. На рис.2 показана схема изменения ссылок в
каждом случае.
*/

//		рис. 2 Вставка элемента new в односвязный список (в котором info - поле данных)
/* 
Вставка в начало списка

				 +----+            п                +----+
				 |new |            р                |new |
				 +----+            е                +----+
				 |    |            в   .------------|    |
				 +----+            р   |            +----+
								   а   |
	   +----+    +----+    +----+  щ в |  +----+    +----+    +----+
	   |info|    |info|    |info|  а   |  |info|    |info|    |info|
\/\/\->+----+    +----+    +----+  е   |  +----+    +----+    +----+
	   |    |--->|    |--->| 0  |  т   '->|    |--->|    |--->| 0  |
	   +----+    +----+    +----+  с      +----+    +----+    +----+
								   я

Вставка в середину списка

				 +----+            п                    +----+
				 |new |            р                    |new |
				 +----+            е                    +----+
				 |    |            в        .---------->|    |
				 +----+            р        |        .--+----+
								   а        |        |
	   +----+    +----+    +----+  щ в      | +----+ |  +----+    +----+
	   |info|    |info|    |info|  а        | |info| |  |info| .->|info|
\/\/\->+----+    +----+    +----+  е   \/\/\->+----+ |  +----+ |  +----+
	   |    |--->|    |--->| 0  |  т        '-|    | '->|    |-'  | 0  |
	   +----+    +----+    +----+  с          +----+    +----+    +----+
								   я


Вставка в конец списка

				 +----+            п                    +----+
				 |new |            р                    |new |<----------.
				 +----+            е                    +----+           |
				 |    |            в                    | 0  |           |
				 +----+            р                    +----+           |
								   а                                     |
	   +----+    +----+    +----+  щ в        +----+    +----+    +----+ |
	   |info|    |info|    |info|  а          |info| .->|info|    |info| |
\/\/\->+----+    +----+    +----+  е   \/\/\->+----+ |  +----+    +----+ |
	   |    |--->|    |--->| 0  |  т          |    |-'  |    |--->|    |-'
	   +----+    +----+    +----+  с          +----+    +----+    +----+
								   я
*/